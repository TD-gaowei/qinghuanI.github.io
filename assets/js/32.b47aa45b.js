(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{343:function(t,a,s){"use strict";s.r(a);var n=s(5),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"成长目标"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#成长目标"}},[t._v("#")]),t._v(" 成长目标")]),t._v(" "),a("p",[t._v("锻炼解决工程问题的能力，将学到的技术转化为工程成果")]),t._v(" "),a("p",[t._v("卓越的解决工程问题能力离不开扎实的理论知识和丰富的项目实践，也离不开优秀的工具")]),t._v(" "),a("h2",{attrs:{id:"工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#工具"}},[t._v("#")]),t._v(" 工具")]),t._v(" "),a("p",[t._v("工欲善其事，必先利其器")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.jetbrains.com/webstorm/",target:"_blank",rel:"noopener noreferrer"}},[t._v("WebStorm"),a("OutboundLink")],1),t._v(" - WebStorm 是一个适用于 JavaScript 和相关技术的集成开发环境")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.postman.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Postman"),a("OutboundLink")],1),t._v(" - 用于接口调试")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://xmind.cn/",target:"_blank",rel:"noopener noreferrer"}},[t._v("xmind"),a("OutboundLink")],1),t._v(" - 用来制作思维导图")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://plantuml.com/zh/",target:"_blank",rel:"noopener noreferrer"}},[t._v("PlantUML"),a("OutboundLink")],1),t._v(" - 通过纯文本的方式来生成 UML 图")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.atlassian.com/zh/software/confluence",target:"_blank",rel:"noopener noreferrer"}},[t._v("Confluence"),a("OutboundLink")],1),t._v(" - 一个专业的企业知识管理与协同软件，也可以用于构建企业 wiki")])]),t._v(" "),a("h2",{attrs:{id:"编码指导原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编码指导原则"}},[t._v("#")]),t._v(" 编码指导原则")]),t._v(" "),a("ol",[a("li",[t._v("前端永远只做两件事，get 和 set 数据")]),t._v(" "),a("li",[t._v("要么从数据输入端解决问题，要么从数据输出端解决问题")]),t._v(" "),a("li",[t._v("没有 debugger 不出的 bug，只有没有耐心 debugger 的 bug")]),t._v(" "),a("li",[t._v("状态复杂度只会转移而不会消失，在合适的位置处理状态")]),t._v(" "),a("li",[t._v("做到 don't repeat yourself 是写出好代码的重要一步")]),t._v(" "),a("li",[t._v("一个成熟的系统既有输出，也有输入")]),t._v(" "),a("li",[t._v("一个方法（函数）/变量只做一件事")]),t._v(" "),a("li",[t._v("中心化的状态可以与多个独立系统交互")]),t._v(" "),a("li",[t._v("脱离具体业务场景谈技术没有任何意义")])]),t._v(" "),a("h2",{attrs:{id:"runtime"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#runtime"}},[t._v("#")]),t._v(" Runtime")]),t._v(" "),a("p",[t._v("Runtime 是指程序在运行时的状态和行为。在计算机编程中，Runtime 是指程序在实际运行中所表现出来的一种状态。它包括了程序的执行环境和执行状态，以及程序在运行时所产生的各种数据和结果。\nJS 的 runtime 如下：")]),t._v(" "),a("ul",[a("li",[t._v("浏览器")]),t._v(" "),a("li",[t._v("node.js")]),t._v(" "),a("li",[t._v("其他小众运行时，比如 Deno/Bun")])]),t._v(" "),a("h2",{attrs:{id:"js-使用总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-使用总结"}},[t._v("#")]),t._v(" JS 使用总结")]),t._v(" "),a("h3",{attrs:{id:"如何理解状态变化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何理解状态变化"}},[t._v("#")]),t._v(" 如何理解状态变化？")]),t._v(" "),a("p",[t._v("JS 是一种事件驱动的语言，绝大部分业务场景下状态的变化由于"),a("strong",[t._v("事件")]),t._v("触发，那么数据输入端就在事件处理函数中")]),t._v(" "),a("p",[t._v("前端只有 "),a("code",[t._v("input")]),t._v(" 和 "),a("code",[t._v("textarea")]),t._v(" 获取用户输入内容")]),t._v(" "),a("h3",{attrs:{id:"如何使用错误处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何使用错误处理"}},[t._v("#")]),t._v(" 如何使用错误处理？")]),t._v(" "),a("p",[t._v("只要有 I/O 的地方，必须有错误处理。比如各类请求/文件读写/存储读写等等")]),t._v(" "),a("p",[t._v("同步代码")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// I/O handler")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// record handler error")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("异步代码")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("Promise"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"error"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("catch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("e")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// record handler error")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"什么时候用函数-什么时候用类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么时候用函数-什么时候用类"}},[t._v("#")]),t._v(" 什么时候用函数，什么时候用类？")]),t._v(" "),a("p",[t._v("函数在 JS 中是一等公民。所以对于单一的业务逻辑，使用函数可以满足，如果有很多业务逻辑并且这些业务逻辑做相同的事，就可以封装成类")]),t._v(" "),a("h3",{attrs:{id:"async-await-与-promise-使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#async-await-与-promise-使用"}},[t._v("#")]),t._v(" Async/Await 与 Promise 使用")]),t._v(" "),a("p",[t._v("使用 "),a("code",[t._v("Async/Await")]),t._v(" 会阻塞后面的代码。使用 "),a("code",[t._v("Promise.then()")]),t._v(" 不会阻塞后面的代码。所以推荐在代码中首先使用 "),a("code",[t._v("Promise.then()")])]),t._v(" "),a("p",[t._v("串行请求")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fetchAll")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("request1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("request2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等待 request1 执行完再执行")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fetchAll")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("并行请求")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fetchAll")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// request1 和 request2 同时执行")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("request1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("request2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fetchAll")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"如何快速熟悉业务代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何快速熟悉业务代码"}},[t._v("#")]),t._v(" 如何快速熟悉业务代码？")]),t._v(" "),a("p",[t._v("把代码跑起来，走一遍业务流程，关键地方使用断点，搞清楚每一个方法（函数）的作用")]),t._v(" "),a("h2",{attrs:{id:"前端工程化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前端工程化"}},[t._v("#")]),t._v(" 前端工程化")]),t._v(" "),a("p",[t._v("前端工程化，就是指对前端进行一些流程的标准化，让开发变得更有效率，且更好地做产品交付")]),t._v(" "),a("h2",{attrs:{id:"组件思维"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组件思维"}},[t._v("#")]),t._v(" 组件思维")]),t._v(" "),a("p",[t._v("组件是一种高度的抽象设计，将业务逻辑和业务状态抽象为独立可复用的单元。用一句话讲，组件是对状态和与状态相关的业务逻辑的封装。组件由业务状态、业务逻辑和 DOM 片段组成。组件是一种或一类业务场景的具体实现，解决大型项目中代码复用等问题")]),t._v(" "),a("p",[t._v("组件是一个抽象事物，既为事物，那么便有创建、运行和销毁的过程，所有组件有挂载、更新和卸载阶段。")]),t._v(" "),a("p",[t._v("组件具有天然的状态隔离性，相当于组件是独立封闭的单元。而在 SPA 应用中，页面上的功能由许多组件组合而成。在这个过程中，多个组件之间不可避免的要共享某些状态。为了实现这些功能，就需要打破组件的状态隔离性，让状态在这些组件内流转，加强组件之间的关联性。这个过程就是组件通信")]),t._v(" "),a("p",[t._v("在组件中，如果方法中涉及组件状态，那么方法需要定义在组件内，否则定义在组件外。由此可以抽象出若方法中涉及的状态不属于当前的系统，那么最好在系统外定义该方法")]),t._v(" "),a("h2",{attrs:{id:"框架-库使用指导"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#框架-库使用指导"}},[t._v("#")]),t._v(" 框架/库使用指导")]),t._v(" "),a("p",[t._v("严格遵守框架/库的使用规范，拒绝反模式是写出优雅代码的基本准则")]),t._v(" "),a("p",[t._v("彻底理解框架/库的 API 使用原则是写出正确代码的关键")])])}),[],!1,null,null,null);a.default=e.exports}}]);